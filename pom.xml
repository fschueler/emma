<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright © 2014 TU Berlin (emma@dima.tu-berlin.de)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>eu.stratosphere</groupId>
    <artifactId>emma</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>emma</name>
    <description>
        Emma is a Scala DSL for scalable data analysis.
        Our goal is to improve developer productivity by hiding parallelism aspects behind a high-level, declarative API.
    </description>
    <inceptionYear>2014</inceptionYear>
    <url>https://emma-language.org</url>

    <licenses>
        <license>
            <name>The Apache License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>Alexander Alexandrov</name>
            <email>alexander.alexandrov@tu-berlin.de</email>
            <organization>TU Berlin</organization>
            <organizationUrl>https://www.tu-berlin.de</organizationUrl>
        </developer>
        <developer>
            <name>Gábor Gévay</name>
            <email>gevay@tu-berlin.de</email>
            <organization>TU Berlin</organization>
            <organizationUrl>https://www.tu-berlin.de</organizationUrl>
        </developer>
        <developer>
            <name>Georgi Krastev</name>
            <email>g.krastev@campus.tu-berlin.de</email>
            <organization>TU Berlin</organization>
            <organizationUrl>https://www.tu-berlin.de</organizationUrl>
        </developer>
        <developer>
            <name>Andreas Kunft</name>
            <email>andreas.kunft@tu-berlin.de</email>
            <organization>TU Berlin</organization>
            <organizationUrl>https://www.tu-berlin.de</organizationUrl>
        </developer>
        <developer>
            <name>Felix Schüler</name>
            <email>felix.schueler@campus.tu-berlin.de</email>
            <organization>TU Berlin</organization>
            <organizationUrl>https://www.tu-berlin.de</organizationUrl>
        </developer>
    </developers>

    <scm>
        <connection>scm:git:git@github.com:emmalanguage/emma.git</connection>
        <developerConnection>scm:git:git@github.com:emmalanguage/emma.git</developerConnection>
        <url>git@github.com:emmalanguage/emma.git</url>
    </scm>

    <properties>
        <!-- Common -->
        <encoding>UTF-8</encoding>

        <!-- Maven Plugins -->
        <build-helper-maven-plugin.version>1.7</build-helper-maven-plugin.version>
        <maven-archetype-plugin.version>2.4</maven-archetype-plugin.version>
        <maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
        <maven-eclipse-plugin.version>2.9</maven-eclipse-plugin.version>
        <maven-install-plugin.version>2.5.2</maven-install-plugin.version>
        <maven-jar-plugin.version>2.5</maven-jar-plugin.version>
        <maven-shade-plugin.version>2.4.1</maven-shade-plugin.version>
        <maven-surefire-plugin.version>2.18.1</maven-surefire-plugin.version>
        <maven-source-plugin.version>2.4</maven-source-plugin.version>
        <scala-maven-plugin.version>3.2.0</scala-maven-plugin.version>

        <!-- Java -->
        <java.version>1.7</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>

        <!-- Scala -->
        <scala.version>2.11.8</scala.version>
        <scala.tools.version>2.11</scala.tools.version>

        <!-- Type-level -->
        <cats.version>0.6.0</cats.version>
        <shapeless.version>2.3.1</shapeless.version>

        <!-- Hadoop -->
        <hadoop.version>2.2.0</hadoop.version>
        <!-- Flink -->
        <flink.version>0.10.0</flink.version>
        <!-- Spark -->
        <spark.version>2.0.0</spark.version>

        <!-- Logging -->
        <log4j.version>1.2.17</log4j.version>
        <slf4j.version>1.7.9</slf4j.version>
        <scala-logging.version>2.1.2</scala-logging.version>

        <!-- Testing -->
        <junit.version>4.12</junit.version>
        <scalacheck.version>1.12.5</scalacheck.version>
        <scalatest.version>2.2.6</scalatest.version>

        <!-- Other dependencies -->
        <argparse4j.version>0.4.4</argparse4j.version>
        <reflections.version>0.9.9</reflections.version>
        <scala.graph-core.version>1.9.0</scala.graph-core.version>
        <scala-arm.version>1.4</scala-arm.version>

        <!-- Test configuration -->
        <excludedSurefireGroups>eu.stratosphere.emma.testutil.ExampleTest</excludedSurefireGroups>
        <compile-spec-pipelines>false</compile-spec-pipelines>
    </properties>

    <!-- Sonatype distribution management -->
    <distributionManagement>
        <snapshotRepository>
            <id>ossrh</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
    </distributionManagement>

    <dependencyManagement>
        <dependencies>
            <!-- Scala -->
            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-library</artifactId>
                <version>${scala.version}</version>
            </dependency>
            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-compiler</artifactId>
                <version>${scala.version}</version>
            </dependency>
            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-reflect</artifactId>
                <version>${scala.version}</version>
            </dependency>

            <!-- Emma -->
            <dependency>
                <groupId>eu.stratosphere</groupId>
                <artifactId>emma-flink</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>eu.stratosphere</groupId>
                <artifactId>emma-language</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>eu.stratosphere</groupId>
                <artifactId>emma-examples</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>eu.stratosphere</groupId>
                <artifactId>emma-gui</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>eu.stratosphere</groupId>
                <artifactId>emma-quickstart</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>eu.stratosphere</groupId>
                <artifactId>emma-spark</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!-- Emma (test jars) -->
            <dependency>
                <groupId>eu.stratosphere</groupId>
                <artifactId>emma-language</artifactId>
                <version>${project.version}</version>
                <type>test-jar</type>
                <scope>test</scope>
            </dependency>

            <!-- Type-level -->
            <dependency>
                <groupId>org.typelevel</groupId>
                <artifactId>cats_${scala.tools.version}</artifactId>
                <version>${cats.version}</version>
            </dependency>
            <dependency>
                <groupId>com.chuusai</groupId>
                <artifactId>shapeless_${scala.tools.version}</artifactId>
                <version>${shapeless.version}</version>
            </dependency>

            <!-- Hadoop -->
            <dependency>
                <groupId>org.apache.hadoop</groupId>
                <artifactId>hadoop-common</artifactId>
                <version>${hadoop.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.hadoop</groupId>
                <artifactId>hadoop-hdfs</artifactId>
                <version>${hadoop.version}</version>
                <scope>provided</scope>
            </dependency>

            <!-- Flink -->
            <dependency>
                <groupId>org.apache.flink</groupId>
                <artifactId>flink-scala_${scala.tools.version}</artifactId>
                <version>${flink.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.flink</groupId>
                <artifactId>flink-java_${scala.tools.version}</artifactId>
                <version>${flink.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.flink</groupId>
                <artifactId>flink-clients_${scala.tools.version}</artifactId>
                <version>${flink.version}</version>
                <scope>provided</scope>
            </dependency>

            <!-- Spark -->
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-core_${scala.tools.version}</artifactId>
                <version>${spark.version}</version>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-sql_${scala.tools.version}</artifactId>
                <version>${spark.version}</version>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-mllib_${scala.tools.version}</artifactId>
                <version>${spark.version}</version>
            </dependency>

            <!-- CSV -->
            <dependency>
                <groupId>net.sf.opencsv</groupId>
                <artifactId>opencsv</artifactId>
                <version>2.3</version>
            </dependency>

            <!-- Logging -->
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>${log4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-log4j12</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <dependency>
                <groupId>com.typesafe.scala-logging</groupId>
                <artifactId>scala-logging-slf4j_${scala.tools.version}</artifactId>
                <version>${scala-logging.version}</version>
            </dependency>

            <!-- Scalactic -->
            <dependency>
                <groupId>org.scalactic</groupId>
                <artifactId>scalactic_${scala.tools.version}</artifactId>
                <version>${scalatest.version}</version><!-- use scaslatest version -->
            </dependency>

            <!-- Test -->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>org.scalacheck</groupId>
                <artifactId>scalacheck_${scala.tools.version}</artifactId>
                <version>${scalacheck.version}</version>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest_${scala.tools.version}</artifactId>
                <version>${scalatest.version}</version>
                <scope>compile</scope>
            </dependency>

            <!-- Arguments parsing -->
            <dependency>
                <groupId>net.sourceforge.argparse4j</groupId>
                <artifactId>argparse4j</artifactId>
                <version>${argparse4j.version}</version>
            </dependency>

            <!-- Dynamic loading -->
            <dependency>
                <groupId>org.reflections</groupId>
                <artifactId>reflections</artifactId>
                <version>${reflections.version}</version>
            </dependency>

            <!-- Graphs -->
            <dependency>
                <groupId>com.assembla.scala-incubator</groupId>
                <artifactId>graph-core_${scala.tools.version}</artifactId>
                <version>${scala.graph-core.version}</version>
            </dependency>

            <!-- Auto-Resource Management -->
            <dependency>
                <groupId>com.jsuereth</groupId>
                <artifactId>scala-arm_${scala.tools.version}</artifactId>
                <version>${scala-arm.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <profiles>
        <!-- Profile that activates integration tests and compile-spec-pipelines -->
        <profile>
            <id>IT</id>
            <properties>
                <!-- Test configuration -->
                <excludedSurefireGroups>java.io.Serializable</excludedSurefireGroups> <!-- never used -->
                <compile-spec-pipelines>true</compile-spec-pipelines>
            </properties>
        </profile>
    </profiles>

    <build>
        <plugins>
            <!-- Scala compiler -->
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>${scala-maven-plugin.version}</version>
                <executions>
                    <!-- Run scala compiler in the process-resources phase, so that dependencies on -->
                    <!-- scala classes can be resolved later in the Java compile phase -->
                    <execution>
                        <id>scala-compile-first</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>

                    <!-- Run scala compiler in the process-test-resources phase, so that dependencies on -->
                    <!-- scala classes can be resolved later in the Java test-compile phase -->
                    <execution>
                        <id>scala-test-compile</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <recompileMode>incremental</recompileMode>
                    <useZincServer>true</useZincServer>
                    <jvmArgs>
                        <jvmArg>-Xms128m</jvmArg>
                        <jvmArg>-Xmx512m</jvmArg>
                        <javacArg>-Xlint:unchecked</javacArg>
                        <javacArg>-Xlint:deprecation</javacArg>
                    </jvmArgs>
                    <args>
                        <arg>-unchecked</arg>
                        <arg>-deprecation</arg>
                        <arg>-feature</arg>
                        <arg>-Yrangepos</arg>
                        <arg>-Xmax-classfile-name</arg>
                        <arg>140</arg>
                        <!--<arg>-Xdisable-assertions</arg>-->
                    </args>
                </configuration>
            </plugin>

            <!-- Eclipse integration -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>${maven-eclipse-plugin.version}</version>
                <configuration>
                    <downloadSources>true</downloadSources>
                    <projectnatures>
                        <projectnature>org.scala-ide.sdt.core.scalanature</projectnature>
                        <projectnature>org.eclipse.jdt.core.javanature</projectnature>
                    </projectnatures>
                    <buildcommands>
                        <buildcommand>org.scala-ide.sdt.core.scalabuilder</buildcommand>
                    </buildcommands>
                    <classpathContainers>
                        <classpathContainer>org.scala-ide.sdt.launching.SCALA_CONTAINER</classpathContainer>
                        <classpathContainer>org.eclipse.jdt.launching.JRE_CONTAINER</classpathContainer>
                    </classpathContainers>
                    <excludes>
                        <exclude>org.scala-lang:scala-library</exclude>
                        <exclude>org.scala-lang:scala-compiler</exclude>
                    </excludes>
                    <sourceIncludes>
                        <sourceInclude>**/*.scala</sourceInclude>
                        <sourceInclude>**/*.java</sourceInclude>
                    </sourceIncludes>
                </configuration>
            </plugin>

            <!-- Adding scala source directories to build path -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>${build-helper-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>src/main/scala</source>
                            </sources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>add-test-source</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>add-test-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>src/test/scala</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Creating code generation folder on the fly -->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>generate-sources</id>
                        <phase>generate-sources</phase>
                        <configuration>
                            <tasks>
                                <mkdir dir="${java.io.tmpdir}/emma/codegen"/>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Adding code generation folder to JUnit tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <additionalClasspathElements>
                        <additionalClasspathElement>${java.io.tmpdir}/emma/codegen</additionalClasspathElement>
                    </additionalClasspathElements>
                    <systemPropertyVariables>
                        <emma.test.macro.toolboxcp>${project.basedir}/target/classes</emma.test.macro.toolboxcp>
                    </systemPropertyVariables>
                    <includes>
                        <include>**/Test*.java</include>
                        <include>**/*Test.java</include>
                        <include>**/*TestCase.java</include>
                        <include>**/*Spec.java</include>
                        <include>**/*Suite.java</include>
                    </includes>
                    <!-- Memory for the Travis build -->
                    <argLine>-Xms1024m -Xmx2048m</argLine>
                </configuration>
            </plugin>

            <!-- Check for proper LICENSE header -->
            <plugin>
                <groupId>com.mycila</groupId>
                <artifactId>license-maven-plugin</artifactId>
                <version>3.0</version>
                <executions>
                    <execution>
                        <id>check-license</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <header>com/mycila/maven/plugin/license/templates/APACHE-2.txt</header>
                    <properties>
                        <owner>TU Berlin</owner>
                        <email>emma@dima.tu-berlin.de</email>
                    </properties>
                    <excludes>
                        <exclude>**/LICENSE</exclude>
                        <exclude>**/NOTICE</exclude>
                        <exclude>**/README.md</exclude>
                        <exclude>**/**.ipynb</exclude>
                        <exclude>**/scalastyle_config.xml</exclude>
                        <exclude>src/test/resources/**</exclude>
                        <exclude>src/main/resources/**</exclude>
                        <exclude>public/js/paper-full-v0.9.23.min.js</exclude>
                        <exclude>public/**/*foundation*</exclude>
                    </excludes>
                    <mapping>
                        <scala>SLASHSTAR_STYLE</scala>
                        <java>SLASHSTAR_STYLE</java>
                    </mapping>
                </configuration>
            </plugin>

            <!-- Generate NOTICE file -->
            <plugin>
                <groupId>org.jasig.maven</groupId>
                <artifactId>maven-notice-plugin</artifactId>
                <version>1.0.6.1</version>
                <executions>
                    <execution>
                        <id>check-notice</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <generateChildNotices>false</generateChildNotices>
                    <noticeTemplate>https://gist.githubusercontent.com/aalexandrov/25a931c7d106415c8af7/raw/04e7a3d5534194929f1864d0535b8cc1c5f9cddb/NOTICE.template</noticeTemplate>
                    <includeChildDependencies>true</includeChildDependencies>
                    <licenseMapping>
                        <param>https://source.jasig.org/licenses/license-mappings.xml</param>
                        <param>file://${project.basedir}/tools/license-mappings.xml</param>
                    </licenseMapping>
                    <generateChildNotices>false</generateChildNotices>
                </configuration>
            </plugin>
        </plugins>

        <pluginManagement>
            <plugins>
                <!-- Shade Package (Create package with dependencies) -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>${maven-shade-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>shade-package</id>
                            <phase>package</phase>
                            <goals>
                                <goal>shade</goal>
                            </goals>
                            <configuration>
                                <minimizeJar>false</minimizeJar>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <artifactId>maven-archetype-plugin</artifactId>
                    <version>${maven-archetype-plugin.version}</version><!--$NO-MVN-MAN-VER$-->
                </plugin>
                <plugin>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>${maven-install-plugin.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>${maven-deploy-plugin.version}</version>
                </plugin>

                <!-- Scala style check -->
                <plugin>
                    <groupId>org.scalastyle</groupId>
                    <artifactId>scalastyle-maven-plugin</artifactId>
                    <version>0.8.0</version>
                    <configuration>
                        <verbose>false</verbose>
                        <failOnViolation>true</failOnViolation>
                        <includeTestSourceDirectory>true</includeTestSourceDirectory>
                        <failOnWarning>false</failOnWarning>
                        <sourceDirectory>${basedir}/src/main/scala</sourceDirectory>
                        <testSourceDirectory>${basedir}/src/test/scala</testSourceDirectory>
                        <configLocation>${session.executionRootDirectory}/scalastyle_config.xml</configLocation>
                        <outputFile>${session.executionRootDirectory}/target/scalastyle-output.xml</outputFile>
                        <outputEncoding>UTF-8</outputEncoding>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>check</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <modules>
        <module>emma-language</module>
        <module>emma-flink</module>
        <module>emma-spark</module>
        <module>emma-examples</module>
        <module>emma-gui</module>
        <module>emma-quickstart</module>
        <module>emma-sysml-dsl</module>
    </modules>

</project>
